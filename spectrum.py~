from matplotlib import rcParams, rc
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt
import numpy as np
import math
from brokenaxes import brokenaxes
dir = "/Users/svalheim/work/jastro/spectrum/"
#plt.style.use(u"trygveplot")

params = {'savefig.dpi'        : 300, # save figures to 300 dpi
          'ytick.major.size'   : 6,
          'ytick.minor.size'   : 3,
          'xtick.major.size'   : 6,
          'xtick.minor.size'   : 3,
          'xtick.top'          : False,
          'ytick.right'        : False,
          'axes.spines.top'    : False,
          'axes.spines.bottom' : True,
          'axes.spines.left'   : True,
          'axes.spines.right'  : False,
          'axes.grid.axis'     : 'y',
          'axes.grid'          : False
          }

rcParams.update(params)

h    = 6.62607e-34 # Planck's konstant
k_b  = 1.38065e-23 # Boltzmanns konstant
Tcmb = 2.7255      # K CMB Temperature

def cmb(nu, A):
    x = h*nu/(k_b*Tcmb)
    g = (np.exp(x)-1)**2/(x**2*np.exp(x))
    s_cmb = A/g
    return s_cmb

def sync(nu, As, alpha):
    #alpha = 1., As = 30 K (30*1e6 muK)
    nu_0 = 0.408*1e9 # 408 MHz
    fnu, f = np.loadtxt(dir+"Synchrotron_template_GHz_extended.txt", unpack=True)
    f = np.interp(nu, fnu*1e9, f)
    f0 = np.interp(nu_0, nu, f) # Value of s at nu_0
    s_s = As*(nu_0/nu)**2*f/f0
    return s_s


def ff(nu,EM,Te):
    #EM = 1 cm-3pc, Te= 500 #K
    T4 = Te/1e4
    nu9 = nu/1e9 #Hz
    g_ff = np.log(np.exp(5.960-np.sqrt(3)/np.pi*np.log(nu9*T4**(-3./2.)))+np.e)
    tau = 0.05468*Te**(-3./2.)*nu9**(-2)*EM*g_ff
    s_ff = 1e6*Te*(1-np.exp(-tau))
    return s_ff


def sdust(nu, Asd, nu_0):
    fnu, f = np.loadtxt(dir+"spdust2_cnm.dat", unpack=True)

    f = np.interp(nu, fnu*1e9, f)
    f0 = np.interp(nu_0, nu, f) # Value of s at nu_0
    s_sd = Asd*(nu_0/nu)**2*f/f0


    return s_sd

def tdust(nu,Ad,betad,Td):
    nu0=545.*1e9
    gamma = h/(k_b*Td)
    s_d=Ad*(nu/nu0)**(betad+1)*(np.exp(gamma*nu0)-1)/(np.exp(gamma*nu)-1)
    return s_d

def lf(nu,Alf,betalf):
    return Alf*(nu)**(betalf)

# ---- Calculating spectra ----
N = 1000
nu    = np.linspace(0.2,5000,N) #Text scaled to 0.2, 5000
CMB   = cmb(  nu*1e9, 70)
FF    = ff(   nu*1e9, 30., 7000.)
SYNC  = sync( nu*1e9, 30.*1e6,1.)
SDUST = sdust(1.5*nu*1e9, 50, 41e9)+sdust(0.9*nu*1e9, 50, 22.8e9)
TDUST = tdust(nu*1e9, 200, 1.6,19.)
sumf = FF+SYNC+SDUST+TDUST
fgs=[CMB,FF,SYNC,SDUST,TDUST]
# ---- Figure parameters ----
#fig = plt.figure(figsize=(12, 8)) #Regular
ratio=5
fig, (ax2, ax) = plt.subplots(2,1,sharex=True,figsize=(16,8),gridspec_kw = {'height_ratios':[1, ratio]})

ax2.spines['bottom'].set_visible(False)
ax2.tick_params(labelbottom='off')
ax2.xaxis.set_ticks_position('none')

xmin=0.3#0.3
xmax=4000#3700
ymin=0.05
ymax=7e2
ymax2=1e8#ymax+1e8
ymax15=1000#ymax+500
#bax = brokenaxes( ylims=((0,0.05), (7e2, 1000)))

# ---- Foreground plotting parameters ----
col=["C9","C0","C2","C1","C3","C7"]
label=["CMB","Free-Free","Synchrotron","Spinning Dust","Thermal Dust", "Sum fg."]
#rot=[-8, -35, -45, -70, 18, -40] #Regular
rot=[-8, -40, -50, -73, 22, -45] #mid
#rot=[-5, -17, -25, -55, 10, -20] #Long
idx=[17, 25, 25, 15, 46, 6]
#scale=[5,105,195] # Scaling CMB, thermal dust and sum up and down
scale=[5,150,200]

ax.loglog(nu,sumf, "--", linewidth=6, color=col[-1])
ax2.loglog(nu,sumf, "--", linewidth=6, color=col[-1])
# ---- Plotting foregrounds and labels ----
j=0
for i in range(len(fgs)):
    ax.loglog(nu,fgs[i], linewidth=4,color=col[i])
    ax2.loglog(nu,fgs[i], linewidth=4,color=col[i])
    if i==0 or i==4:
        ax.text(nu[idx[i]], fgs[i][idx[i]]+scale[j], label[i], rotation=rot[i], color=col[i],fontsize=14)
        j+=1
    else:
        ax.text(nu[idx[i]], fgs[i][idx[i]], label[i], rotation=rot[i], color=col[i],fontsize=14)

# ---- Plotting sum of all foregrounds ----        
ax.text(nu[idx[-1]], fgs[-1][idx[-1]]+scale[2], label[-1], rotation=rot[-1], color=col[-1],fontsize=14)

# ---- Plotting CO lines ----
ax.axvline(x=115., color='k', alpha=0.7)
ax.axvline(x=230., color='k', alpha=0.7)
ax.axvline(x=345., color='k', alpha=0.7)
ax2.axvline(x=115., color='k', alpha=0.7)
ax2.axvline(x=230., color='k', alpha=0.7)
ax2.axvline(x=345., color='k', alpha=0.7)

ax2.text(115.,ymax2, "CO 1-0", color='k', alpha=0.7, ha='right',va='top',rotation=90)
ax2.text(230.,ymax2, "CO 2-1", color='k', alpha=0.7, ha='right',va='top',rotation=90)
ax2.text(345.,ymax2, "CO 3-2", color='k', alpha=0.7, ha='right',va='top',rotation=90)

# ---- Data band ranges ----
band_range1   = [.406,.410]      # Haslam?
band_range2   = [2.1,2.4]      # Spass?
band_range3   = [21,25.5]        # WMAP K
band_range4   = [30,37]          # WMAP Ka
band_range5   = [38,45]          # WMAP Q
band_range6   = [54,68]          # WMAP V
band_range7   = [84,106]         # WMAP W
band_range8   = [23.9,34.5]      # Planck 30
band_range9   = [39,50]          # Planck 44
band_range10  = [60,78]          # Planck 70
band_range11  = [82,120]         # Planck 100
band_range12  = [125,170]        # Planck 143
band_range13  = [180,265]        # Planck 217
band_range14  = [300,430]        # Planck 353
band_range15  = [450,650]        # Planck 545
band_range16  = [700,1020]       # Planck 857
band_range17  = [1000,1540]      # DIRBE 1250
band_range18  = [1780,2500]      # DIRBE 2140
band_range19  = [2600,3500]      # DIRBE 3000
band_range20  = [4.,6.]      # C-BASS
band_range21  = [10.,12.]      # QUIJOTE
band_range22  = [12.,14.]      # QUIJOTE
band_range23  = [16.,18.]      # QUIJOTE
band_range24  = [18.,21.]      # QUIJOTE
band_range25  = [26.,36.]      # QUIJOTE
band_range26  = [35.,47.]      # QUIJOTE


# ---- Plotting single data ----
ax2.text(np.mean(band_range1),ymax2-0.2,"0.408 Haslam",color='purple',va='bottom',horizontalalignment='center')
ax.axvspan(band_range1[0],band_range1[1],color='purple',hatch='////',alpha=0.3,label="Haslam")
ax2.axvspan(band_range1[0],band_range1[1],color='purple',hatch='////',alpha=0.3)

ax2.text(np.mean(band_range2),ymax2-0.2,"2.303 S-PASS",color='green',va='bottom',horizontalalignment='center')
ax.axvspan(band_range2[0],band_range2[1],color='green',hatch='\\\\',alpha=0.3, label="S-PASS")
ax2.axvspan(band_range2[0],band_range2[1],color='green',hatch='\\\\',alpha=0.3)


ax2.text(np.mean(band_range20),ymax2-0.2,"5.0 C-BASS",color='orange',va='bottom',horizontalalignment='center')
ax.axvspan(band_range20[0],band_range20[1],color='orange',hatch='\\\\',alpha=0.3, label="C-BASS")
ax2.axvspan(band_range20[0],band_range20[1],color='orange',hatch='\\\\',alpha=0.3)



# ---- Plotting QUIJOTE ----
ax2.text(11,ymax2-0.2,"11",  color='C4', va='bottom',alpha=1,horizontalalignment='center')
ax2.text(13,ymax2-0.2,"13",  color='C4', va='bottom',alpha=1,horizontalalignment='center')
ax2.text(17,ymax2-0.2,"17",  color='C4', va='bottom',alpha=1,horizontalalignment='center')
ax2.text(19+1,ymax2-0.2,"19", color='C4', va='bottom',alpha=1,horizontalalignment='center')
ax2.text(31,ymax2-0.2,"31",color='C4', va='bottom',alpha=1,horizontalalignment='center')
ax2.text(41+1,ymax2-0.2,"41",color='C4', va='bottom',alpha=1,horizontalalignment='center')

ax.axvspan(band_range21[0] ,band_range21[1], color='C4',hatch='+',alpha=0.3, label="QUIJOTE")
ax.axvspan(band_range22[0] ,band_range22[1], color='C4',hatch='+',alpha=0.3)
ax.axvspan(band_range23[0],band_range23[1],color='C4',hatch='+',alpha=0.3)
ax.axvspan(band_range24[0],band_range24[1],color='C4',hatch='+',alpha=0.3)
ax.axvspan(band_range25[0],band_range25[1],color='C4',hatch='+',alpha=0.3)
ax.axvspan(band_range26[0],band_range26[1],color='C4',hatch='+',alpha=0.3)

ax2.axvspan(band_range21[0] ,band_range21[1], color='C4',hatch='+',alpha=0.3)
ax2.axvspan(band_range22[0] ,band_range22[1], color='C4',hatch='+',alpha=0.3)
ax2.axvspan(band_range23[0],band_range23[1],color='C4',hatch='+',alpha=0.3)
ax2.axvspan(band_range24[0],band_range24[1],color='C4',hatch='+',alpha=0.3)
ax2.axvspan(band_range25[0],band_range25[1],color='C4',hatch='+',alpha=0.3)
ax2.axvspan(band_range26[0],band_range26[1],color='C4',hatch='+',alpha=0.3)

# ---- Plotting Planck ----
ax2.text(27-2,ymax2-0.2,"30",  color='C1', va='bottom',alpha=1  )
ax2.text(42+2,ymax2-0.2,"44",  color='C1', va='bottom',alpha=1)
ax2.text(64,ymax2-0.2,"70",  color='C1', va='bottom',alpha=1  )
ax2.text(90+5,ymax2-0.2,"100", color='C1', va='bottom',alpha=1)
ax2.text(135,ymax2-0.2,"143",color='C1', va='bottom',alpha=1)
ax2.text(200,ymax2-0.2,"217",color='C1', va='bottom',alpha=1)
ax2.text(330,ymax2-0.2,"353",color='C1', va='bottom',alpha=1)
ax2.text(490,ymax2-0.2,"545",color='C1', va='bottom',alpha=1)
ax2.text(770,ymax2-0.2,"857",color='C1', va='bottom',alpha=1)

ax.axvspan(band_range8[0] ,band_range8[1], color='C1',hatch='//',alpha=0.3, label="Planck")
ax.axvspan(band_range9[0] ,band_range9[1], color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range10[0],band_range10[1],color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range11[0],band_range11[1],color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range12[0],band_range12[1],color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range13[0],band_range13[1],color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range14[0],band_range14[1],color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range15[0],band_range15[1],color='C1',hatch='//',alpha=0.3)
ax.axvspan(band_range16[0],band_range16[1],color='C1',hatch='//',alpha=0.3)

ax2.axvspan(band_range8[0] ,band_range8[1], color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range9[0] ,band_range9[1], color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range10[0],band_range10[1],color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range11[0],band_range11[1],color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range12[0],band_range12[1],color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range13[0],band_range13[1],color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range14[0],band_range14[1],color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range15[0],band_range15[1],color='C1',hatch='//',alpha=0.3)
ax2.axvspan(band_range16[0],band_range16[1],color='C1',hatch='//',alpha=0.3)

# ---- Plotting WMAP ----
ax2.text(22.8,ymax2-0.2,"K", color='C9' ,va='bottom', alpha = 0.5)
ax2.text(31.5+1,ymax2-0.2,"Ka",color='C9', va='bottom', alpha = 0.5)
ax2.text(39.-2, ymax2-0.2,"Q", color='C9' ,va='bottom', alpha = 0.5)
ax2.text(58., ymax2-0.2,"V", color='C9' ,va='bottom', alpha = 0.5)
ax2.text(90.-5, ymax2-0.2,"W", color='C9' ,va='bottom', alpha = 0.5)

ax.axvspan(band_range3[0],band_range3[1],color='C9',hatch='\\\\',alpha=0.3,label='WMAP')
ax.axvspan(band_range4[0],band_range4[1],color='C9',hatch='\\\\',alpha=0.3)
ax.axvspan(band_range5[0],band_range5[1],color='C9',hatch='\\\\',alpha=0.3)
ax.axvspan(band_range6[0],band_range6[1],color='C9',hatch='\\\\',alpha=0.3)
ax.axvspan(band_range7[0],band_range7[1],color='C9',hatch='\\\\',alpha=0.3)

ax2.axvspan(band_range3[0],band_range3[1],color='C9',hatch='\\\\',alpha=0.3)
ax2.axvspan(band_range4[0],band_range4[1],color='C9',hatch='\\\\',alpha=0.3)
ax2.axvspan(band_range5[0],band_range5[1],color='C9',hatch='\\\\',alpha=0.3)
ax2.axvspan(band_range6[0],band_range6[1],color='C9',hatch='\\\\',alpha=0.3)
ax2.axvspan(band_range7[0],band_range7[1],color='C9',hatch='\\\\',alpha=0.3)

# ---- Plotting DIRBE ----
ax2.text(1100,ymax2-0.2,r"1249",color='C3', va='bottom',alpha=1)
ax2.text(1800,ymax2-0.2,r"2141",color='C3', va='bottom',alpha=1)
ax2.text(2700,ymax2-0.2,r"2998",color='C3', va='bottom',alpha=1)

ax.axvspan(band_range17[0],band_range17[1],color='C3',hatch='+',alpha=0.3,label='DIRBE')
ax.axvspan(band_range18[0],band_range18[1],color='C3',hatch='+',alpha=0.3)
ax.axvspan(band_range19[0],band_range19[1],color='C3',hatch='+',alpha=0.3)

ax2.axvspan(band_range17[0],band_range17[1],color='C3',hatch='+',alpha=0.3)
ax2.axvspan(band_range18[0],band_range18[1],color='C3',hatch='+',alpha=0.3)
ax2.axvspan(band_range19[0],band_range19[1],color='C3',hatch='+',alpha=0.3)

# ---- Axis label stuff ----
ax.set_xticks(np.append(ax.get_xticks(),[3,30,300,3000]))
ax.set_xticklabels(np.append(ax.get_xticks(),300))
ax.xaxis.set_major_formatter(ticker.ScalarFormatter(useMathText=True))
ax.tick_params(axis='both', which='major', labelsize=16, direction='in')
ax.tick_params(which="both",direction="in")

ax2.tick_params(axis='both', which='major', labelsize=16, direction='in')
ax2.tick_params(which="both",direction="in")

plt.ylabel(r"Brightness temperature [$\mu$K]",fontsize=18)
plt.xlabel(r"Frequency [GHz]",fontsize=18)

ax2.set_ylim(ymax15,ymax2)
ax2.set_xlim(xmin,xmax)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)
ax.legend(loc=6,prop={'size': 20})

# ---- Adding broken axis lines ----
d = .005  # how big to make the diagonal lines in axes coordinates
kwargs = dict(transform=ax2.transAxes, color='k', clip_on=False)
ax2.plot((-d, +d), (-d*ratio, + d*ratio), **kwargs)        # top-left diagonal
kwargs.update(transform=ax.transAxes)  # switch to the bottom axes
ax.plot((-d, +d), (1 - d, 1 + d), **kwargs)  # bottom-left diagonal

# ---- Plotting ----
#plt.savefig(dir+"figs/spectrum_extended.png", bbox_inches='tight',  pad_inches=0.02)
plt.tight_layout(h_pad=0.3)
#plt.savefig(dir+"figs/spectrum_extended.png", bbox_inches='tight',  pad_inches=0.02)
#plt.savefig(dir+"figs/spectrum_extended.pdf", bbox_inches='tight',  pad_inches=0.02)
plt.savefig(dir+"figs/spectrum_x5.png", bbox_inches='tight',  pad_inches=0.02)

plt.show()


